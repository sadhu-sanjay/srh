<div
  class="sticky -top-[140dvh] h-[140dvh] w-full opacity-0 transition-all delay-700 duration-1000"
  id="svg-circles"
>
  <svg
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 200 200"
    width="100%"
    height="100%"
    id="svgEl"
  >
    <defs>
      <filter id="shadow" x="-50%" y="-50%" width="200%" height="200%">
        <feDropShadow
          dx="0"
          dy="0"
          stdDeviation="5"
          flood-color="#000000"
          flood-opacity="0.2"></feDropShadow>
      </filter>
    </defs>
  </svg>

  <h1
    id="fame"
    class="absolute -top-full left-1/2 w-[100dvw] -translate-x-1/2 text-[35dvw] font-black leading-none text-secondary-accent transition-all delay-1000 duration-1000"
  >
    F<span class="relative inline-block"
      >A<div
        id="builders"
        class="absolute -left-full top-[87%] w-auto text-8xl font-black leading-none text-secondary-accent transition-all delay-1000 duration-1000"
      >
        BUILDERS
        <div class="leading-2 w-5/6 text-xl font-normal text-secondary-accent">
          SRH spans entertainment and advertising, giving you access to top
          talent and big ideas. <br />
          <br /> We believe that big, bold stunts can be the most efficient way to
          build mental availability (1).
        </div>
      </div></span
    >ME
  </h1>

  <script>
    // Array to hold the circle data (cx, cy, radius, and fill)
    const circlesData = [
      { cx: 120, cy: 90, cxN: 200 ,cyN: 30, r: 100, fill: "rgba(var(--accent), 0.4)" },
      { cx: 100, cy: 90, cxN: screen.width/4 * 2,cyN: screen.height/2 , r: 85, fill: "rgba(var(--accent), 0.2)" },
      { cx: 120, cy: 80, cxN: screen.width/4 * 3,cyN: screen.height/3 * 2, r: 70, fill: "rgba(var(--accent), 0.4)" },
      { cx: 80, cy: 80,  cxN: screen.width/4 * 3,cyN: screen.height, r: 55, fill: "rgba(var(--accent), 0.5)" },
      // { cx: 130, cy: 100,cxN: 20,cyN: 20, r: 40, fill: "rgba(var(--accent), 0.2)" },
      // { cx: 130, cy: 80, cxN: 20,cyN: 20, r: 25, fill: "rgba(var(--accent), 0.9)" },
      // { cx: 130, cy: 80, cxN: 30,cyN: 20, r: 25, fill: "rgba(var(--accent), 0.9)" },
      // { cx: 130, cy: 80, cxN: 30,cyN: 20, r: 25, fill: "rgba(var(--accent), 0.9)" },
      // { cx: 130, cy: 80, cxN: 30,cyN: 30, r: 25, fill: "rgba(var(--accent), 0.9)" },
      // { cx: 130, cy: 80, cxN: 40,cyN: 30, r: 25, fill: "rgba(var(--accent), 0.9)" },
      // { cx: 130, cy: 80, cxN: 40,cyN: 30, r: 25, fill: "rgba(var(--accent), 0.9)" },
      // { cx: 130, cy: 80, cxN: 40,cyN: 30, r: 25, fill: "rgba(var(--accent), 0.9)" },
    ];

    const break5 = 50;
    const break6 = 60;
    const break7 = 70;
    const break8 = 80;
    const break9 = 90;

    const svg = document.getElementById("svgEl") as HTMLElement;
    // Iterate over the circle data and create each circle programmatically
    circlesData.forEach((data: any) => {
      // Create a new circle element using the SVG namespace
      const circle = document.createElementNS(
        "http://www.w3.org/2000/svg",
        "circle"
      );

      // Set the attributes for the circle
      circle.setAttribute("cx", data.cx);
      circle.setAttribute("cy", data.cy);
      circle.setAttribute("r", data.r);
      circle.setAttribute("fill", data.fill);

      // Append the circle to the SVG element
      svg.appendChild(circle);
    });

    const elementScroll = document.getElementById("main-window");
    const builders = document.getElementById("builders") as HTMLElement;
    const textFame = document.getElementById("fame") as HTMLElement;
    const circles = document.querySelectorAll("#svg-circles circle");

    function animatePos(
      circle: SVGElement,
      targetCx: number,
      targetCy: number,
      targetR: number,
      duration: number = 700
    ) {
      const startTime = performance.now();
      const initialCx = parseFloat(circle.getAttribute("cx") || "0");
      const initialCy = parseFloat(circle.getAttribute("cy") || "0");
      const initialR = parseFloat(circle.getAttribute("r") || "0");
      const deltaCx = targetCx - initialCx;
      const deltaCy = targetCy - initialCy;
      const deltaR = targetR - initialR;

      function animate(time: number) {
        const elapsed = time - startTime;

        const progress = Math.min(elapsed / duration, 1);

        const newCx = initialCx + deltaCx * progress;
        const newCy = initialCy + deltaCy * progress;
        const newR = initialR + deltaR * progress;

        circle.setAttribute("cx", newCx.toString());
        circle.setAttribute("cy", newCy.toString());
        circle.setAttribute("r", newR.toString());

        if (progress < 1) {
          requestAnimationFrame(animate);
        }
      }

      requestAnimationFrame(animate);
    }

    elementScroll?.addEventListener("scroll", (el: Event) => {
      const target = el.target as HTMLElement;
      const scrollableHeight = target.scrollHeight - window.outerHeight;
      const scrollPercentage = (target.scrollTop / scrollableHeight) * 100;

      if (scrollPercentage > break5 && scrollPercentage <= break6) {
        textFame.style.top = "-100%";
        builders.style.left = "-100%";
        circles.forEach((circle: any, index) =>
          animatePos(
            circle,
            circlesData[index].cx,
            circlesData[index].cy,
            circlesData[index].r
          )
        );
      } else if (scrollPercentage > break6 && scrollPercentage <= break7) {
        textFame.style.top = "0%";
        builders.style.left = "0%";

        circles.forEach((circle: any, index) =>
          animatePos(circle, 120, 90, circlesData[index].r)
        );
      } else if (scrollPercentage > break7 && scrollPercentage <= break8) {
        textFame.style.top = "-100%";
        builders.style.left = "-100%";

        circles.forEach((circle: any) => animatePos(circle, 120, 90, 25));
      } else if (scrollPercentage > break8 && scrollPercentage <= break9) {
        console.log("Cirle", scrollPercentage)

        circles.forEach((circle: any, index: number) => animatePos(circle, circlesData[index].cxN, circlesData[index].cyN, 30));

      }
    });
  </script>
</div>
